let
DayCount = 2000,
StartDate = #date(2021, 1, 1),
EndDate = Date.EndOfMonth(Date.AddMonths(Date.From(DateTime.LocalNow()),1)),
MonthNumberForEndFinancialYear = 6,
Source = List.Dates(StartDate, Number.From(EndDate) - Number.From(StartDate) + 1,#duration(1,0,0,0)),
TableFromList = Table.FromList(Source, Splitter.SplitByNothing()),
ChangedType = Table.TransformColumnTypes(TableFromList,{{"Column1", type date}}),
RenamedColumns = Table.RenameColumns(ChangedType,{{"Column1", "Date"}}),
InsertYear = Table.AddColumn(RenamedColumns, "Year", each Date.Year([Date]), type number),
InsertQuarter = Table.AddColumn(InsertYear, "Quarter Num", each Date.QuarterOfYear([Date]), type number),
InsertCalendarQtr = Table.AddColumn(InsertQuarter, "Quarter Year", each "Q" & Number.ToText([Quarter Num]) & " " & Number.ToText([Year]),type text),
InsertCalendarQtrOrder = Table.AddColumn(InsertCalendarQtr, "Quarter Year Order", each [Year] * 10 + [Quarter Num], type number),
InsertMonth = Table.AddColumn(InsertCalendarQtrOrder, "Month Num", each Date.Month([Date]), type number),
InsertMonthName = Table.AddColumn(InsertMonth, "Month Name", each Date.ToText([Date], "MMMM"), type text),
InsertMonthNameShort = Table.AddColumn(InsertMonthName, "Month Name Short", each Date.ToText([Date], "MMM"), type text),
InsertCalendarMonth = Table.AddColumn(InsertMonthNameShort, "Month Year", each (try(Text.Range([Month Name],0,3)) otherwise [Month Name]) & " " & Number.ToText([Year]), type text),
InsertCalendarMonthOrder = Table.AddColumn(InsertCalendarMonth, "Month Year Order", each [Year] * 100 + [Month Num], type number),
InsertWeek = Table.AddColumn(InsertCalendarMonthOrder, "Week Num", each Date.WeekOfYear([Date]), type number),
InsertCalendarWk = Table.AddColumn(InsertWeek, "Week Year", each "W" & Number.ToText([Week Num]) & " " & Number.ToText([Year]), type text),
InsertCalendarWkOrder = Table.AddColumn(InsertCalendarWk, "Week Year Order", each [Year] * 100 + [Week Num], type number),
InsertWeekEnding = Table.AddColumn(InsertCalendarWkOrder, "Week Ending", each Date.EndOfWeek([Date]), type date),
    InsertedEndOfMonth = Table.AddColumn(InsertWeekEnding, "Month Ending", each Date.EndOfMonth([Date]), type date),
InsertDay = Table.AddColumn(InsertedEndOfMonth, "Month Day Num", each Date.Day([Date]), type number),
InsertDayInt = Table.AddColumn(InsertDay, "Date Int", each [Year] * 10000 + [Month Num] * 100 + [Month Day Num], type number),
InsertDayWeek = Table.AddColumn(InsertDayInt, "Day Num Week", each Date.DayOfWeek([Date]) + 1, type number),
InsertDayName = Table.AddColumn(InsertDayWeek, "Day Name", each Date.ToText([Date], "dddd"), type text),
InsertWeekend = Table.AddColumn(InsertDayName, "Weekend", each if [Day Num Week] = 1 then "Y" else if [Day Num Week] = 7 then "Y" else "N", type text),
InsertDayNameShort = Table.AddColumn(InsertWeekend, "Day Name Short", each Date.ToText([Date], "ddd"), type text),
InsertIndex = Table.AddIndexColumn(InsertDayNameShort, "Index", 1, 1),
InsertDayOfYear = Table.AddColumn(InsertIndex, "Day of Year", each Date.DayOfYear([Date]), type number),
InsertCurrentDay = Table.AddColumn(InsertDayOfYear, "Current Day?", each Date.IsInCurrentDay([Date]), type logical),
InsertCurrentWeek = Table.AddColumn(InsertCurrentDay, "Current Week?", each Date.IsInCurrentWeek([Date]), type logical),
InsertCurrentMonth = Table.AddColumn(InsertCurrentWeek, "Current Month?", each Date.IsInCurrentMonth([Date]), type logical),
InsertCurrentQuarter = Table.AddColumn(InsertCurrentMonth, "Current Quarter?", each Date.IsInCurrentQuarter([Date]), type logical),
InsertCurrentYear = Table.AddColumn(InsertCurrentQuarter, "Current Year?", each Date.IsInCurrentYear([Date]), type logical),
InsertCompletedDay = Table.AddColumn(InsertCurrentYear, "Completed Days", each if DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8))) > [Date] then "Y" else "N", type text),
InsertCompletedWeek = Table.AddColumn(InsertCompletedDay, "Completed Weeks", each if (Date.Year(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) > Date.Year([Date])) then "Y" else if (Date.Year(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) < Date.Year([Date])) then "N" else if (Date.WeekOfYear(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) > Date.WeekOfYear([Date])) then "Y" else "N", type text),
InsertCompletedMonth = Table.AddColumn(InsertCompletedWeek, "Completed Months", each if (Date.Year(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) > Date.Year([Date])) then "Y" else if (Date.Year(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) < Date.Year([Date])) then "N" else if (Date.Month(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) > Date.Month([Date])) then "Y" else "N", type text),
InsertCompletedQuarter = Table.AddColumn(InsertCompletedMonth, "Completed Quarters", each if (Date.Year(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) > Date.Year([Date])) then "Y" else if (Date.Year(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) < Date.Year([Date])) then "N" else if (Date.QuarterOfYear(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) > Date.QuarterOfYear([Date])) then "Y" else "N", type text),
InsertCompletedYear = Table.AddColumn(InsertCompletedQuarter, "Completed Years", each if (Date.Year(DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8)))) > Date.Year([Date])) then "Y" else "N", type text),
InsertDateWithText = Table.AddColumn(InsertCompletedYear, "Date with Text", each if [Date] = DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8))) then "Today" else if Date.AddDays([Date],1) = DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8))) then "Yesterday" else Date.ToText([Date],"dd-MMM-yyyy")),
InsertFutureDay = Table.AddColumn(InsertDateWithText, "Future Days", each if DateTime.Date(DateTimeZone.RemoveZone(DateTimeZone.SwitchZone(DateTimeZone.UtcNow(),8))) < [Date] then "Y" else "N", type text),
InsertFutureWeek = Table.AddColumn(InsertFutureDay, "Future Week", each if [Completed Weeks] = "Y" then "N" else 
if [#"Current Week?"] = true then "N" else
"Y", type text),
    InsertFutureMonth = Table.AddColumn(InsertFutureWeek, "Future Month", each if [Completed Months] = "Y" then "N" else 
if [#"Current Month?"] = true then "N" else
"Y", type text),
    InsertFutureQuarter = Table.AddColumn(InsertFutureMonth, "Future Quarter", each if [Completed Quarters] = "Y" then "N" else 
if [#"Current Quarter?"] = true then "N" else
"Y", type text),
    InsertFutureYear = Table.AddColumn(InsertFutureQuarter, "Future Year", each if [Completed Years] = "Y" then "N" else 
if [#"Current Year?"] = true then "N" else
"Y", type text),
    #"Sorted Rows1" = Table.Sort(InsertFutureYear,{{"Date", Order.Descending}}),
    #"▶ DatesSinceTodayFields" = #"Sorted Rows1",
    DateToday = Date.From(DateTime.LocalNow()),
    DaysAgo = Table.AddColumn(#"▶ DatesSinceTodayFields", "Days Since Today", each Duration.Days([Date] -  DateToday), Int32.Type),
    MonthsAgo = Table.AddColumn(DaysAgo, "Months Since Today", each ([Year] * 12 + [Month Num]) - (Date.Year(DateToday ) * 12 + Date.Month(DateToday )), Int32.Type),
    YearsAgo = Table.AddColumn(MonthsAgo, "Years Since Today", each [Year] - Date.Year(DateToday ), Int32.Type),
    #"◀ Dates Since Today" = YearsAgo,
    #"▶Financial Year Calcs" = #"◀ Dates Since Today",
    #"FY Month Number" = Table.AddColumn(#"▶Financial Year Calcs", "Financial Month Number", each if [Month Num] > MonthNumberForEndFinancialYear  then [Month Num] -MonthNumberForEndFinancialYear  else 12-MonthNumberForEndFinancialYear+[Month Num], Int64.Type),
    #"Financial Year End" = Table.AddColumn(#"FY Month Number", "Financial Year End", each if [Financial Month Number] <=12-MonthNumberForEndFinancialYear  then [Year]+1 else [Year]),
    #"Fiancial Year Start" = Table.AddColumn(#"Financial Year End", "Financial Year Start", each [Financial Year End] - 1, type number),
    #"Changed Type5" = Table.TransformColumnTypes(#"Fiancial Year Start",{{"Financial Year End", type text}, {"Financial Year Start", type text}}),
    #"Financial Year Range" = Table.AddColumn(#"Changed Type5", "Financial Year", each Text.End([Financial Year Start],2) &"-"& Text.End([Financial Year End],2 )),
    #"Removed FY Start and End" = Table.RemoveColumns(#"Financial Year Range",{"Financial Year End", "Financial Year Start"}),
    // To work out Financial Quarter
    #"DivideFinancialMonth by 3" = Table.AddColumn(#"Removed FY Start and End", "Financial Qtr Number", each [Financial Month Number] / 3, type number),
    #"Rounded Up" = Table.TransformColumns(#"DivideFinancialMonth by 3",{{"Financial Qtr Number", Number.RoundUp, Int64.Type}}),
    #"Added Financial Quarter" = Table.AddColumn(#"Rounded Up", "Financial Quarter", each "FQ-"&Text.From([Financial Qtr Number])),
    #"Removed Columns" = Table.RemoveColumns(#"Added Financial Quarter",{"Financial Qtr Number"}),
    #"Changed Type6" = Table.TransformColumnTypes(#"Removed Columns",{{"Financial Quarter", type text}, {"Financial Year", type text}}),
    #"Renamed Financial Sort" = Table.RenameColumns(#"Changed Type6",{{"Financial Month Number", "Financial Month Number for Sort"}}),
    #"◀ Financial Year Calcs" = #"Renamed Financial Sort"
in
    #"◀ Financial Year Calcs"
